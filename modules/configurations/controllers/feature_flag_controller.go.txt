package controllers

import (
	"fmt"

	"github.com/gofiber/fiber/v2"
	"github.com/ortizdavid/golang-modular-software/common/helpers"
	"github.com/ortizdavid/golang-modular-software/common/middlewares"
	"github.com/ortizdavid/golang-modular-software/database"
	authentication "github.com/ortizdavid/golang-modular-software/modules/authentication/services"
	"github.com/ortizdavid/golang-modular-software/modules/configurations/entities"
	"github.com/ortizdavid/golang-modular-software/modules/configurations/services"
)

type FeatureFlagController struct {
	service *services.FeatureFlagService
	authService *authentication.AuthService
	configService *services.AppConfigurationService
	infoLogger *helpers.Logger
	errorLogger *helpers.Logger
}

func NewFeatureFlagController(db *database.Database) *FeatureFlagController {
	return &FeatureFlagController{
		service:       services.NewFeatureFlagService(db),
		authService:   authentication.NewAuthService(db),
		configService: services.NewAppConfigurationService(db),
		infoLogger:    helpers.NewInfoLogger("configurations-info.log"),
		errorLogger:   helpers.NewErrorLogger("configurations-error.log"),
	}
}


func (ctrl *FeatureFlagController) Routes(router *fiber.App, db *database.Database) {
	authMiddleware := middlewares.NewSessionAuthMiddleware(db)
	group := router.Group("/configurations/feature-flags", authMiddleware.CheckLoggedUser)
	group.Get("", ctrl.index)
	group.Get("/manage", ctrl.manageForm)
	group.Post("/manage", ctrl.manage)
}

func (ctrl *FeatureFlagController) index(c *fiber.Ctx) error {
	loggedUser, _ := ctrl.authService.GetLoggedUser(c.Context(), c)
	return c.Render("configuration/feature-flag/index", fiber.Map{
		"Title": "Basic Configurations",
		"AppConfig": ctrl.configService.LoadAppConfigurations(c.Context()),
		"LoggedUser": loggedUser,
	})
}

func (ctrl *FeatureFlagController) manageForm(c *fiber.Ctx) error {
	loggedUser, _ := ctrl.authService.GetLoggedUser(c.Context(), c)
	return c.Render("configuration/feature-flag/manage", fiber.Map{
		"Title": "Edit Basic Configuration",
		"AppConfig": ctrl.configService.LoadAppConfigurations(c.Context()),
		"LoggedUser":loggedUser,
	})
}

func (ctrl *FeatureFlagController) manage(c *fiber.Ctx) error {
	var request entities.ManageFeatureFlagRequest
	loggedUser, _ := ctrl.authService.GetLoggedUser(c.Context(), c)
	if err := c.BodyParser(&request); err != nil {
		return helpers.HandleHttpErrors(c, err)
	}
	err := ctrl.service.UpdateFeatureFlag(c.Context(), request)
	if err != nil {
		ctrl.errorLogger.Error(c, err.Error())
		return helpers.HandleHttpErrors(c, err)
	}
	ctrl.infoLogger.Info(c, fmt.Sprintf("User '%s' updated feature-flag configurations!", loggedUser.UserName))
	return c.Redirect("/configurations/feature-flags")
}