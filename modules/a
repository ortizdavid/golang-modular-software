package main

import (
	"github.com/gofiber/fiber/v2"
	"your_project/database"
	"your_project/middlewares"
	"your_project/entities"
	"your_project/authentication"
	"your_project/configurations"
	"your_project/references"
	"your_project/company"
	"your_project/employees"
	"your_project/back_office"
	"your_project/reports"
)

// RegisterRoutes initializes and registers controllers (routes) from different modules
func RegisterRoutes(router *fiber.App, db *database.Database) {
	// Initialize the middleware once
	moduleMiddleware := middlewares.NewModuleFlagMiddleware(db)

	// Define route groups and middleware checks
	routeGroups := []struct {
		prefix     string
		module     entities.ModuleInfo
		middlewares []fiber.Handler
	}{
		{
			prefix: "/user-management",
			module: entities.ModuleAuthentication,
			middlewares: []fiber.Handler{
				moduleMiddleware.CheckModule(entities.ModuleAuthentication.Code),
			},
		},
		{
			prefix: "/api/user-management",
			module: entities.ModuleAuthentication,
			middlewares: []fiber.Handler{
				moduleMiddleware.CheckModule(entities.ModuleAuthentication.Code),
			},
		},
		{
			prefix: "/configurations",
			module: entities.ModuleConfigurations,
			middlewares: []fiber.Handler{
				moduleMiddleware.CheckModule(entities.ModuleConfigurations.Code),
				// Add other middlewares specific to configurations if needed
			},
		},
		{
			prefix: "/api/configurations",
			module: entities.ModuleConfigurations,
			middlewares: []fiber.Handler{
				moduleMiddleware.CheckModule(entities.ModuleConfigurations.Code),
				// Add other middlewares specific to configurations if needed
			},
		},
		{
			prefix: "/company",
			module: entities.ModuleCompany,
			middlewares: []fiber.Handler{
				moduleMiddleware.CheckModule(entities.ModuleCompany.Code),
				// Add other middlewares specific to company if needed
			},
		},
		{
			prefix: "/api/company",
			module: entities.ModuleCompany,
			middlewares: []fiber.Handler{
				moduleMiddleware.CheckModule(entities.ModuleCompany.Code),
				// Add other middlewares specific to company if needed
			},
		},
		{
			prefix: "/employees",
			module: entities.ModuleEmployees,
			middlewares: []fiber.Handler{
				moduleMiddleware.CheckModule(entities.ModuleEmployees.Code),
				// Add other middlewares specific to employees if needed
			},
		},
		{
			prefix: "/api/employees",
			module: entities.ModuleEmployees,
			middlewares: []fiber.Handler{
				moduleMiddleware.CheckModule(entities.ModuleEmployees.Code),
				// Add other middlewares specific to employees if needed
			},
		},
		{
			prefix: "/references",
			module: entities.ModuleReferences,
			middlewares: []fiber.Handler{
				moduleMiddleware.CheckModule(entities.ModuleReferences.Code),
				// Add other middlewares specific to references if needed
			},
		},
		{
			prefix: "/api/references",
			module: entities.ModuleReferences,
			middlewares: []fiber.Handler{
				moduleMiddleware.CheckModule(entities.ModuleReferences.Code),
				// Add other middlewares specific to references if needed
			},
		},
	}

